{"version":3,"sources":["Icon.js","data.js","UnitTree.js","UnitStatistics.js","App.js","serviceWorker.js","index.js"],"names":["Icon","id","style","icon","icons","x","y","width","height","title","backgroundColor","backgroundImage","backgroundPosition","fontSize","padding","color","overflow","textOverflow","whiteSpace","trainTime","unit","Object","values","data","CAbilTrain","InfoArray","Unit","Time","getUnit","CUnit","Error","mergeTree","mergeDeepWith","l","r","Array","isArray","from","length","Math","max","_","i","getAbilGroup","memoizeWith","identity","abil","key","startsWith","parent","JSON","parse","stringify","replace","undefined","getAbilCmd","cmd","split","groupId","CmdButtonArray","DefaultButtonFace","Button","getUnitAbils","CardLayouts","abils","card","LayoutButtons","button","Type","AbilCmd","Row","Column","console","log","filter","Boolean","Race","name","startingUnits","units","index","u","includes","push","getAllPossibleUnits","map","marginBottom","UnitTree","display","justifyContent","idToName","row","Supply","Minerals","Gas","Size","Armor","Health","Shield","Sight","Number","liquipediaUnit","time","Food","LifeMax","CostResource","Vespene","Radius","LifeArmor","ShieldsMax","round","mapObjIndexed","value","hasOwnProperty","Table","rows","borderSpacing","fontWeight","keys","entries","UnitStatistics","routes","path","component","App","flexShrink","marginTop","listStyle","to","activeStyle","flexGrow","Component","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6+xkCAqCeA,MAlCf,YAA8B,IAAdC,EAAa,EAAbA,GAAIC,EAAS,EAATA,MACZC,EAAOC,EAAMH,GADQ,EAEGE,GAAQ,EAAE,IAAK,GAAI,GAAI,IAF1B,mBAEpBE,EAFoB,KAEjBC,EAFiB,KAEdC,EAFc,KAEPC,EAFO,KAI3B,OACE,yBACEC,MAAOR,EACPC,MAAK,eACAA,EADA,CAEHQ,gBAAiB,QACjBC,gBAAiBR,GAAQ,kBACzBS,mBAAoBT,GAAI,WAAQE,EAAR,eAAgBC,EAAhB,MACxBC,QACAC,aAGAL,GACA,yBACED,MAAO,CACLW,SAAU,GACVC,QAAS,EACTC,MAAO,QACPC,SAAU,SACVC,aAAc,WACdC,WAAY,WAGbjB,K,wCC3BEkB,EAAY,SAACC,GACxB,cAA4BC,OAAOC,OAAOC,EAAKC,YAA/C,eACE,IAD2D,IAAhDC,EAA+C,KAA/CA,UACX,MAA6BJ,OAAOC,OAAOG,GAA3C,eAAuD,CAAC,IAAD,OAA1CC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,KACjB,GAAID,IAASN,EAAM,OAAOO,IAKnBC,EAAU,SAAC3B,GACtB,IAAMmB,EAAOG,EAAKM,MAAM5B,GACxB,IAAKmB,EAAM,MAAM,IAAIU,MAAJ,2BAA8B7B,IAC/C,OAAOmB,GAGHW,EAAYC,aAAc,SAACC,EAAGC,GAClC,OAAKC,MAAMC,QAAQH,IAAOE,MAAMC,QAAQF,GACjCC,MAAME,KAAK,CAAEC,OAAQC,KAAKC,IAAIP,EAAEK,OAAQJ,EAAEI,UAAW,SAACG,EAAGC,GAAJ,OAC1DT,EAAES,IAAMR,EAAEQ,GAAKX,EAAUE,EAAES,GAAIR,EAAEQ,IAAMT,EAAES,IAAMR,EAAEQ,MAFAR,KAMxCS,EAAeC,YAAYC,KAAU,SAAC5C,GACjD,IAAI6C,EACJ,IAAK,IAAMC,KAAOxB,EAChB,GAAIwB,EAAIC,WAAW,UAAYzB,EAAKwB,GAAK9C,GAAK,CAC5C6C,EAAOvB,EAAKwB,GAAK9C,GACjB,MAGJ,GAAK6C,EAAL,CAEA,GAAIA,EAAKG,OAAQ,CACf,IAAMA,EAASC,KAAKC,MAClBD,KAAKE,UAAUT,EAAaG,EAAKG,SAE9BI,QAAQ,WAAYP,EAAK1B,OAG9B,OAAO,eACFW,EAAUkB,EAAQH,GADvB,CAEEG,YAAQK,IAIZ,OAAOR,MAIIS,EAAaX,YAAYC,KAAU,SAACW,GAAS,IAAD,EACjCA,EAAIC,MAAM,KADuB,mBAChDC,EADgD,KACvCzD,EADuC,KAGjD6C,EAAOH,EAAae,GAG1B,GAAKZ,EAAL,CANuD,IAQ/Ca,EAA8Bb,EAA9Ba,eAAgBlC,EAAcqB,EAAdrB,UAExB,OAAIkC,GAAkBA,EAAe1D,GAC5B,eACF6C,EADL,GAEKa,EAAe1D,GAFpB,CAGEA,GAAIuD,EACJ9B,KAAMD,GAAaA,EAAU,IAAMA,EAAU,GAAGC,OAIhDD,GAAaA,EAAUxB,GAClB,eACF6C,EADL,GAEKrB,EAAUxB,GAFf,CAGE2D,kBAAmBnC,EAAUxB,GAAI4D,OAAO,GAAGD,kBAC3C3D,GAAIuD,SALR,MAYWM,EAAelB,YAAYC,KAAU,SAAC5C,GAAQ,IAAD,EAC3B2B,EAAQ3B,GAA7B8D,mBADgD,MAClC,GADkC,EAKlDC,EAAQ,GAEd,IAAK,IAAMC,KAAQF,EAAa,CAAC,IAAD,uBAC9B,YAAqBA,EAAYE,GAAMC,cAAvC,+CAAsD,CAAC,IAA5CC,EAA2C,QACpD,GAAe,OAAXA,EAAJ,CADoD,IAK5CC,EAA+BD,EAA/BC,KAAMC,EAAyBF,EAAzBE,QAASC,EAAgBH,EAAhBG,IAAKC,EAAWJ,EAAXI,OACf,YAATH,IAEJJ,EAAM,GAAD,OAAIC,GAAJ,OAAWK,GAAX,OAAiBC,IAAYhB,EAAWc,SAN3CG,QAAQC,IAAIV,IAHc,mFAahC,OAAO1C,OAAOC,OAAO0C,GAAOU,OAAOC,YClG/BC,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,cAAT,OACX,6BACE,4BAAKD,GDmG0B,SAACE,GAClCA,EAAK,YAAOA,GAEZ,IAAK,IAAIC,EAAQ,EAAGA,EAAQD,EAAMzC,OAAQ0C,IAAS,CAAC,IAAD,uBACjD,YAAuBlB,EAAaiB,EAAMC,IAA1C,+CAAmD,CAAC,IAAvCtD,EAAsC,QAAtCA,KACX,GAAIA,EAAM,CAAC,IAAD,uBACR,aAAgBS,MAAMC,QAAQV,GAAQA,EAAO,CAACA,IAA9C,+CAAqD,CAAC,IAA3CuD,EAA0C,QAC9CF,EAAMG,SAASD,IAAIF,EAAMI,KAAKF,IAF7B,qFAFqC,mFAUnD,OAAOF,EC/GJK,CAAoBN,GAAeO,KAAI,SAACpF,GAAD,OACtC,yBAAK8C,IAAK9C,EAAIC,MAAO,CAAEoF,aAAc,IACnC,kBAAC,EAAD,CAAMrF,GAAIA,UAgBHsF,MAVf,WACE,OACE,yBAAKrF,MAAO,CAAEsF,QAAS,OAAQC,eAAgB,kBAC7C,kBAAC,EAAD,CAAMZ,KAAK,UAAUC,cAAe,CAAC,WACrC,kBAAC,EAAD,CAAMD,KAAK,SAASC,cAAe,CAAC,mBACpC,kBAAC,EAAD,CAAMD,KAAK,OAAOC,cAAe,CAAC,WAAY,a,QCb9CY,EAAW,SAACzF,GAAD,OAAQA,EAAGoD,QAAQ,iBAAkB,UAyDhD0B,EAnDyB,CAE7B,iCACA,iCACA,kCACA,sCACA,gCACA,2CACA,2CACA,8BACA,mCACA,yCACA,wCACA,uCACA,uCACA,uCACA,uCACA,sCACA,wCACA,wCACA,sCACA,4CACA,8CACAM,KAAI,SAACM,GAAS,IA/BEd,EA+BH,EAYTc,EAAIlC,MAAM,KAZD,oBAEXxD,EAFW,KAGX2F,EAHW,KAIXC,EAJW,KAKXC,EALW,KAMXnE,EANW,KAOXoE,EAPW,KAQXC,EARW,KASXC,EATW,KAUXC,EAVW,KAWXC,EAXW,KAcb,MAAO,CACLlG,IA9Cc4E,EA8CD5E,EA9CU4E,EAAKxB,QAAQ,IAAK,KA+CzCuC,OAAQQ,OAAOR,GACfC,SAAUO,OAAOP,GACjBC,IAAKM,OAAON,GACZnE,KAAMyE,OAAOzE,GACboE,KAAMK,OAAOL,GACbC,MAAOI,OAAOJ,GACdC,OAAQG,OAAOH,GACfC,OAAQE,OAAOF,GACfC,MAAOC,OAAOD,OAKfd,KAAI,SAACgB,GACJ,IAAMjF,EAAOQ,EAAQyE,EAAepG,IAEpC,IAAKmB,EAAM,OAAO,KAHK,IAvDPkF,EA6DdrG,EAQEmB,EARFnB,GANqB,EAcnBmB,EAPFmF,YAPqB,MAOd,EAPc,EAQrBC,EAMEpF,EANFoF,QARqB,EAcnBpF,EALFqF,aATqB,gBASyB,GATzB,GASLZ,gBATK,MASM,EATN,MASSa,eATT,MASmB,EATnB,IAcnBtF,EAJFuF,cAVqB,MAUZ,GAVY,IAcnBvF,EAHFwF,iBAXqB,MAWT,EAXS,IAcnBxF,EAFFyF,kBAZqB,MAYR,EAZQ,EAarBV,EACE/E,EADF+E,MAGIR,EAAM,CACV3F,KAAM,kBAAC,EAAD,CAAMC,GAAIA,IAChByB,KAAMgE,EAASzF,GACf2F,QAASW,EACTV,SAAUA,EACVC,IAAKY,EACL/E,MA7Ec2E,EA6EGnF,EAAUlB,GA5Ef,kBAATqG,EAAoBA,EAAO/D,KAAKuE,MAAMR,EAAO,MA6EhDP,KAAe,EAATY,EACNX,MAAOY,EACPX,OAAQO,EACRN,OAAQW,EACRV,MAAOA,GAIT,OAAOY,aAAc,SAACC,EAAOjE,GAC3B,OAAIsD,EAAeY,eAAelE,IAAQiE,IAAUX,EAAetD,GAE/D,oCACGiE,EADH,KACYX,EAAetD,GAD3B,KAKGiE,IACNrB,MAEJjB,OAAOC,SAEV,SAASuC,EAAT,GAA0B,IAATC,EAAQ,EAARA,KACf,OACE,2BAAOjH,MAAO,CAAEkH,cAAe,IAC7B,2BAAOlH,MAAO,CAAEmH,WAAY,SAC1B,4BACGhG,OAAOiG,KAAKH,EAAK,IAAI9B,KAAI,SAACtC,GAAD,OACxB,wBAAIA,IAAKA,GAAMA,QAIrB,+BACGoE,EAAK9B,KAAI,SAACM,EAAKjD,GAAN,OACR,wBAAIK,IAAKL,GACNrB,OAAOkG,QAAQ5B,GAAKN,KAAI,mCAAEtC,EAAF,KAAOiE,EAAP,YACvB,wBAAIjE,IAAKA,GAAMiE,YAadQ,IC7HTC,EAAS,CACb,CACEhH,MAAO,YACPiH,KAAM,aACNC,UAAWpC,GAEb,CACE9E,MAAO,kBACPiH,KAAM,mBACNC,UDgHJ,WACE,OAAO,kBAACT,EAAD,CAAOC,KAAMpC,OCtEP6C,MAvCf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK1H,MAAO,CAAEsF,QAAS,SACrB,yBAAKtF,MAAO,CAAE2H,WAAY,EAAG/G,QAAS,KACpC,wBAAIZ,MAAO,CAAEY,QAAS,EAAGgH,UAAW,EAAGC,UAAW,SAC/CN,EAAOpC,KAAI,gBAAG5E,EAAH,EAAGA,MAAOiH,EAAV,EAAUA,KAAV,OACV,wBAAI3E,IAAK2E,EAAMxH,MAAO,CAAEoF,aAAc,IACpC,kBAAC,IAAD,CACE0C,GAAIN,EACJO,YAAa,CACXlH,MAAO,UAGRN,SAMX,0BAAMP,MAAO,CAAEgI,SAAU,EAAGpH,QAAS,KACnC,kBAAC,IAAD,KACG2G,EAAOpC,KAAI,gBAAG5E,EAAH,EAAGA,MAAOiH,EAAV,EAAUA,KAAiBS,EAA3B,EAAgBR,UAAhB,OACV,kBAAC,IAAD,CAAO5E,IAAK2E,EAAMA,KAAMA,GACtB,wBAAIxH,MAAO,CAAE4H,UAAW,IAAMrH,GAC9B,kBAAC0H,EAAD,UAIJ,kBAAC,IAAD,CAAOT,KAAK,KACV,kBAAC,IAAD,CAAUM,GAAIP,EAAO,GAAGC,aC1ClB/C,QACW,cAA7ByD,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN/D,QAAQC,IAAIlD,GAEZiH,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.01343abb.chunk.js","sourcesContent":["import React from \"react\";\nimport icons from \"./icons.json\";\n\nfunction Icon({ id, style }) {\n  const icon = icons[id];\n  const [x, y, width, height] = icon || [-76, -76, 76, 76];\n\n  return (\n    <div\n      title={id}\n      style={{\n        ...style,\n        backgroundColor: \"black\",\n        backgroundImage: icon && \"url(/icons.jpg)\",\n        backgroundPosition: icon && `${-x}px ${-y}px`,\n        width,\n        height\n      }}\n    >\n      {!icon && (\n        <div\n          style={{\n            fontSize: 10,\n            padding: 8,\n            color: \"white\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            whiteSpace: \"nowrap\"\n          }}\n        >\n          {id}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Icon;\n","import { memoizeWith, identity, mergeDeepWith } from \"ramda\";\nimport data from \"./data.json\";\n\nexport const trainTime = (unit) => {\n  for (const { InfoArray } of Object.values(data.CAbilTrain)) {\n    for (const { Unit, Time } of Object.values(InfoArray)) {\n      if (Unit === unit) return Time;\n    }\n  }\n};\n\nexport const getUnit = (id) => {\n  const unit = data.CUnit[id];\n  if (!unit) throw new Error(`No unit data for ${id}`);\n  return unit;\n};\n\nconst mergeTree = mergeDeepWith((l, r) => {\n  if (!Array.isArray(l) || !Array.isArray(r)) return r;\n  return Array.from({ length: Math.max(l.length, r.length) }, (_, i) =>\n    l[i] && r[i] ? mergeTree(l[i], r[i]) : l[i] || r[i]\n  );\n});\n\nexport const getAbilGroup = memoizeWith(identity, (id) => {\n  let abil;\n  for (const key in data) {\n    if (key.startsWith(\"CAbil\") && data[key][id]) {\n      abil = data[key][id];\n      break;\n    }\n  }\n  if (!abil) return;\n\n  if (abil.parent) {\n    const parent = JSON.parse(\n      JSON.stringify(getAbilGroup(abil.parent))\n        // Hack...\n        .replace(\"##unit##\", abil.unit)\n    );\n\n    return {\n      ...mergeTree(parent, abil),\n      parent: undefined\n    };\n  }\n\n  return abil;\n});\n\n// Abilities are very different.\nexport const getAbilCmd = memoizeWith(identity, (cmd) => {\n  const [groupId, id] = cmd.split(\",\");\n\n  const abil = getAbilGroup(groupId);\n\n  // Not all abilities are in data.\n  if (!abil) return undefined;\n\n  const { CmdButtonArray, InfoArray } = abil;\n\n  if (CmdButtonArray && CmdButtonArray[id]) {\n    return {\n      ...abil,\n      ...CmdButtonArray[id],\n      id: cmd,\n      Unit: InfoArray && InfoArray[0] && InfoArray[0].Unit\n    };\n  }\n\n  if (InfoArray && InfoArray[id]) {\n    return {\n      ...abil,\n      ...InfoArray[id],\n      DefaultButtonFace: InfoArray[id].Button[0].DefaultButtonFace,\n      id: cmd\n    };\n  }\n\n  // console.warn(`Unable to find AbilCmd ${cmd}`);\n});\n\nexport const getUnitAbils = memoizeWith(identity, (id) => {\n  const { CardLayouts = [] } = getUnit(id);\n\n  // Abilities are indexed by card-row-column.\n  // Some abilities are visible in data but are actually overwritten by later abils...\n  const abils = {};\n\n  for (const card in CardLayouts) {\n    for (const button of CardLayouts[card].LayoutButtons) {\n      if (button === null) {\n        console.log(CardLayouts);\n        continue;\n      }\n      const { Type, AbilCmd, Row, Column } = button;\n      if (Type !== \"AbilCmd\") continue;\n\n      abils[`${card}${Row}${Column}`] = getAbilCmd(AbilCmd);\n    }\n  }\n\n  return Object.values(abils).filter(Boolean);\n});\n\nexport const getAllPossibleUnits = (units) => {\n  units = [...units];\n\n  for (let index = 0; index < units.length; index++) {\n    for (const { Unit } of getUnitAbils(units[index])) {\n      if (Unit) {\n        for (const u of Array.isArray(Unit) ? Unit : [Unit]) {\n          if (!units.includes(u)) units.push(u);\n        }\n      }\n    }\n  }\n\n  return units;\n};\n","import React from \"react\";\nimport Icon from \"./Icon.js\";\nimport { getAllPossibleUnits } from \"./data.js\";\n\nconst Race = ({ name, startingUnits }) => (\n  <div>\n    <h2>{name}</h2>\n    {getAllPossibleUnits(startingUnits).map((id) => (\n      <div key={id} style={{ marginBottom: 8 }}>\n        <Icon id={id} />\n      </div>\n    ))}\n  </div>\n);\n\nfunction UnitTree() {\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n      <Race name=\"Protoss\" startingUnits={[\"Nexus\"]} />\n      <Race name=\"Terran\" startingUnits={[\"CommandCenter\"]} />\n      <Race name=\"Zerg\" startingUnits={[\"Hatchery\", \"Larva\"]} />\n    </div>\n  );\n}\n\nexport default UnitTree;\n","import React from \"react\";\nimport { mapObjIndexed } from \"ramda\";\nimport Icon from \"./Icon.js\";\nimport { trainTime, getUnit } from \"./data.js\";\n\nconst nameToId = (name) => name.replace(\" \", \"\");\n\nconst idToName = (id) => id.replace(/([a-z])([A-Z])/, \"$1 $2\");\n\n// Faster is normal * 1.4.\nconst fasterTime = (time) =>\n  typeof time !== \"number\" ? time : Math.round(time / 1.4);\n\nconst liquipediaProtossUnits = [\n  // Unit,Supply,Minerals,Gas,Time,Size,Armor,Health,Shield,Sight\n  \"Probe,1,50,0,12,0.75,0,20,20,8\",\n  \"Zealot,2,100,0,27,1,1,100,50,9\",\n  \"Sentry,2,50,100,26,1,1,40,40,10\",\n  \"Stalker,2,125,50,30,1.25,1,80,80,10\",\n  \"Adept,2,100,25,27,1,1,70,70,9\",\n  \"High Templar,2,50,150,39,0.75,0,40,40,10\",\n  \"Dark Templar,2,125,125,39,0.75,1,40,80,8\",\n  \"Archon,4,0,0,9,2,0,10,350,9\",\n  \"Observer,1,25,75,21,1,0,40,20,11\",\n  \"Warp Prism,2,200,0,36,1.75,0,80,100,10\",\n  \"Immortal,4,250,100,39,1.5,1,200,100,9\",\n  \"Colossus,6,300,200,54,2,1,200,150,10\",\n  \"Disruptor,3,150,150,36,1,1,100,100,9\",\n  \"Phoenix,2,150,100,25,1.5,0,120,60,10\",\n  \"Void Ray,4,250,150,43,2,0,150,100,10\",\n  \"Oracle,3,150,150,37,1.5,0,100,60,10\",\n  \"Tempest,5,250,175,43,2.5,2,200,100,12\",\n  \"Carrier,6,350,250,64,2.5,2,300,150,12\",\n  \"Interceptor,0,15,0,11,0.5,0,40,40,7\",\n  \"Mothership Core,2,100,100,21,2,1,130,60,9\",\n  \"Mothership,8,400,400,114,2.75,2,350,350,14\"\n].map((row) => {\n  const [\n    id,\n    Supply,\n    Minerals,\n    Gas,\n    Time,\n    Size,\n    Armor,\n    Health,\n    Shield,\n    Sight\n  ] = row.split(\",\");\n\n  return {\n    id: nameToId(id),\n    Supply: Number(Supply),\n    Minerals: Number(Minerals),\n    Gas: Number(Gas),\n    Time: Number(Time),\n    Size: Number(Size),\n    Armor: Number(Armor),\n    Health: Number(Health),\n    Shield: Number(Shield),\n    Sight: Number(Sight)\n  };\n});\n\nconst units = liquipediaProtossUnits\n  .map((liquipediaUnit) => {\n    const unit = getUnit(liquipediaUnit.id);\n\n    if (!unit) return null;\n\n    const {\n      id,\n      Food = 0,\n      LifeMax,\n      CostResource: { Minerals = 0, Vespene = 0 } = {},\n      Radius = 0.5,\n      LifeArmor = 0,\n      ShieldsMax = 0,\n      Sight\n    } = unit;\n\n    const row = {\n      Icon: <Icon id={id} />,\n      Unit: idToName(id),\n      Supply: -Food,\n      Minerals: Minerals,\n      Gas: Vespene,\n      Time: fasterTime(trainTime(id)),\n      Size: Radius * 2,\n      Armor: LifeArmor,\n      Health: LifeMax,\n      Shield: ShieldsMax,\n      Sight: Sight\n    };\n\n    // Show different wiki value in parens.\n    return mapObjIndexed((value, key) => {\n      if (liquipediaUnit.hasOwnProperty(key) && value !== liquipediaUnit[key])\n        return (\n          <>\n            {value} ({liquipediaUnit[key]})\n          </>\n        );\n\n      return value;\n    }, row);\n  })\n  .filter(Boolean);\n\nfunction Table({ rows }) {\n  return (\n    <table style={{ borderSpacing: 8 }}>\n      <thead style={{ fontWeight: \"bold\" }}>\n        <tr>\n          {Object.keys(rows[0]).map((key) => (\n            <td key={key}>{key}</td>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {rows.map((row, i) => (\n          <tr key={i}>\n            {Object.entries(row).map(([key, value]) => (\n              <td key={key}>{value}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nfunction UnitStatistics() {\n  return <Table rows={units} />;\n}\n\nexport default UnitStatistics;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n  Redirect\n} from \"react-router-dom\";\nimport UnitTree from \"./UnitTree\";\nimport UnitStatistics from \"./UnitStatistics\";\n\nconst routes = [\n  {\n    title: \"Unit Tree\",\n    path: \"/unit-tree\",\n    component: UnitTree\n  },\n  {\n    title: \"Unit Statistics\",\n    path: \"/unit-statistics\",\n    component: UnitStatistics\n  }\n];\n\nfunction App() {\n  return (\n    <Router>\n      <div style={{ display: \"flex\" }}>\n        <nav style={{ flexShrink: 0, padding: 16 }}>\n          <ul style={{ padding: 0, marginTop: 8, listStyle: \"none\" }}>\n            {routes.map(({ title, path }) => (\n              <li key={path} style={{ marginBottom: 4 }}>\n                <NavLink\n                  to={path}\n                  activeStyle={{\n                    color: \"black\"\n                  }}\n                >\n                  {title}\n                </NavLink>\n              </li>\n            ))}\n          </ul>\n        </nav>\n        <main style={{ flexGrow: 1, padding: 16 }}>\n          <Switch>\n            {routes.map(({ title, path, component: Component }) => (\n              <Route key={path} path={path}>\n                <h1 style={{ marginTop: 0 }}>{title}</h1>\n                <Component />\n              </Route>\n            ))}\n\n            <Route path=\"/\">\n              <Redirect to={routes[0].path} />\n            </Route>\n          </Switch>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport data from \"./data.json\";\n\n// Log data so we can inspect in dev tools.\nconsole.log(data);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}