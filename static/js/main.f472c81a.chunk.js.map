{"version":3,"sources":["UnitStatistics.js","App.js","serviceWorker.js","index.js"],"names":["idToName","id","replace","trainTime","unit","Object","values","data","CAbilTrain","InfoArray","Unit","Time","units","map","row","name","split","Supply","Minerals","Gas","Size","Armor","Health","Shield","Sight","Number","liquipediaUnit","CUnit","time","Food","LifeMax","CostResource","Vespene","Radius","LifeArmor","ShieldsMax","Math","round","mapObjIndexed","value","key","hasOwnProperty","filter","Boolean","Table","rows","style","borderSpacing","fontWeight","keys","i","entries","UnitStatistics","App","textAlign","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f472c81a.chunk.js","sourcesContent":["import React from \"react\";\nimport data from \"./data.json\";\nimport { mapObjIndexed } from \"ramda\";\n\nconst nameToId = (name) => name.replace(\" \", \"\");\n\nconst idToName = (id) => id.replace(/([a-z])([A-Z])/, \"$1 $2\");\n\nconst trainTime = (unit) => {\n  for (const { InfoArray } of Object.values(data.CAbilTrain)) {\n    for (const { Unit, Time } of Object.values(InfoArray)) {\n      if (Unit === unit) return Time;\n    }\n  }\n};\n\n// Faster is normal * 1.4.\nconst fasterTime = (time) =>\n  typeof time !== \"number\" ? time : Math.round(time / 1.4);\n\nconst liquipediaProtossUnits = [\n  // Unit,Supply,Minerals,Gas,Time,Size,Armor,Health,Shield,Sight\n  \"Probe,1,50,0,12,0.75,0,20,20,8\",\n  \"Zealot,2,100,0,27,1,1,100,50,9\",\n  \"Sentry,2,50,100,26,1,1,40,40,10\",\n  \"Stalker,2,125,50,30,1.25,1,80,80,10\",\n  \"Adept,2,100,25,27,1,1,70,70,9\",\n  \"High Templar,2,50,150,39,0.75,0,40,40,10\",\n  \"Dark Templar,2,125,125,39,0.75,1,40,80,8\",\n  \"Archon,4,0,0,9,2,0,10,350,9\",\n  \"Observer,1,25,75,21,1,0,40,20,11\",\n  \"Warp Prism,2,200,0,36,1.75,0,80,100,10\",\n  \"Immortal,4,250,100,39,1.5,1,200,100,9\",\n  \"Colossus,6,300,200,54,2,1,200,150,10\",\n  \"Disruptor,3,150,150,36,1,1,100,100,9\",\n  \"Phoenix,2,150,100,25,1.5,0,120,60,10\",\n  \"Void Ray,4,250,150,43,2,0,150,100,10\",\n  \"Oracle,3,150,150,37,1.5,0,100,60,10\",\n  \"Tempest,5,250,175,43,2.5,2,200,100,12\",\n  \"Carrier,6,350,250,64,2.5,2,300,150,12\",\n  \"Interceptor,0,15,0,11,0.5,0,40,40,7\",\n  \"Mothership Core,2,100,100,21,2,1,130,60,9\",\n  \"Mothership,8,400,400,114,2.75,2,350,350,14\"\n].map((row) => {\n  const [\n    id,\n    Supply,\n    Minerals,\n    Gas,\n    Time,\n    Size,\n    Armor,\n    Health,\n    Shield,\n    Sight\n  ] = row.split(\",\");\n\n  return {\n    id: nameToId(id),\n    Supply: Number(Supply),\n    Minerals: Number(Minerals),\n    Gas: Number(Gas),\n    Time: Number(Time),\n    Size: Number(Size),\n    Armor: Number(Armor),\n    Health: Number(Health),\n    Shield: Number(Shield),\n    Sight: Number(Sight)\n  };\n});\n\nconst units = liquipediaProtossUnits\n  .map((liquipediaUnit) => {\n    const unit = data.CUnit[liquipediaUnit.id];\n\n    if (!unit) return null;\n\n    const {\n      id,\n      Food = 0,\n      LifeMax,\n      CostResource: { Minerals = 0, Vespene = 0 } = {},\n      Radius = 0.5,\n      LifeArmor = 0,\n      ShieldsMax = 0,\n      Sight\n    } = unit;\n\n    const row = {\n      Unit: idToName(id),\n      Supply: -Food,\n      Minerals: Minerals,\n      Gas: Vespene,\n      Time: fasterTime(trainTime(id)),\n      Size: Radius * 2,\n      Armor: LifeArmor,\n      Health: LifeMax,\n      Shield: ShieldsMax,\n      Sight: Sight\n    };\n\n    // Show different wiki value in parens.\n    return mapObjIndexed((value, key) => {\n      if (liquipediaUnit.hasOwnProperty(key) && value !== liquipediaUnit[key])\n        return (\n          <>\n            {value} ({liquipediaUnit[key]})\n          </>\n        );\n\n      return value;\n    }, row);\n  })\n  .filter(Boolean);\n\nfunction Table({ rows }) {\n  return (\n    <table style={{ borderSpacing: 8 }}>\n      <thead style={{ fontWeight: \"bold\" }}>\n        <tr>\n          {Object.keys(rows[0]).map((key) => (\n            <td key={key}>{key}</td>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {rows.map((row, i) => (\n          <tr key={i}>\n            {Object.entries(row).map(([key, value]) => (\n              <td key={key}>{value}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nfunction UnitStatistics() {\n  return <Table rows={units} />;\n}\n\nexport default UnitStatistics;\n","import React from \"react\";\nimport UnitStatistics from \"./UnitStatistics\";\n\nfunction App() {\n  return (\n    <div>\n      <h1 style={{ textAlign: \"center\" }}>SC2 Things</h1>\n      <UnitStatistics />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}